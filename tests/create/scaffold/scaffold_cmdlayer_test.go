package scaffold

import (
	"bytes"
	"github.com/kyma-project/modulectl/cmd/modulectl/create/scaffold"
	"github.com/spf13/cobra"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
	"testing"
)

// ***********************
// ******** SETUP ********
// ***********************
type ScaffoldCommandLayerSuite struct {
	suite.Suite
	scaffoldCmd *cobra.Command
	localStdout bytes.Buffer
}

func (s *ScaffoldCommandLayerSuite) SetupTest() {
	s.scaffoldCmd = scaffold.NewCmd()
	s.localStdout = bytes.Buffer{}

	s.scaffoldCmd.SetOut(&s.localStdout)
}

func TestScaffoldCommandSuite(t *testing.T) {
	suite.Run(t, new(ScaffoldCommandLayerSuite))
}

// ***********************
// ***** TEST CASES ******
// ***********************
func (s *ScaffoldCommandLayerSuite) TestNoArgsAllowed() {
	s.scaffoldCmd.SetArgs([]string{"arg1", "arg2", "arg3"})
	err := s.scaffoldCmd.Execute()
	assert.ErrorContains(s.T(), err, "accepts 0 arg(s), received 3")
}

func (s *ScaffoldCommandLayerSuite) TestHelpFlag() {
	s.scaffoldCmd.SetArgs([]string{"--help"})
	err := s.scaffoldCmd.Execute()
	assert.NoError(s.T(), err)

	longHelpMessage := `This is a long description of how the files necessary for module creation are generated by the magic of
this scaffold command. Magic is great, magic is magical.`

	assert.Contains(s.T(), s.localStdout.String(), longHelpMessage)

	assert.Contains(s.T(), s.localStdout.String(), "Usage:\n  scaffold [flags]")

	//	TODO: check if all the flags are printed
}

func (s *ScaffoldCommandLayerSuite) TestDefaultFlagsCorrectlySet() {}

func (s *ScaffoldCommandLayerSuite) TestDefaultFlagsAsInput() {
	s.scaffoldCmd.SetArgs([]string{})
	err := s.scaffoldCmd.Execute()
	assert.NoError(s.T(), err)

	gayExpected := "yes"
	gayActual := s.scaffoldCmd.Flags().Lookup("gay").Value.String()
	gayChanged := s.scaffoldCmd.Flags().Lookup("gay").Changed

	assert.Equal(s.T(), gayExpected, gayActual)
	//assert.True(s.T(), gayChanged)
	assert.False(s.T(), gayChanged)
}

func (s *ScaffoldCommandLayerSuite) TestValidInputs() {}

func (s *ScaffoldCommandLayerSuite) TestInvalidInputs() {
	//	eg: missing flag values, etc.
	//	eg: case sensitivity of the flags
}

func (s *ScaffoldCommandLayerSuite) TestNoFlagsSet() {
	s.scaffoldCmd.SetArgs([]string{})
	err := s.scaffoldCmd.Execute()
	assert.NoError(s.T(), err)

	outputMessage := "This is the help message of the `scaffold` command\n"
	assert.Equal(s.T(), outputMessage, s.localStdout.String())
}

func (s *ScaffoldCommandLayerSuite) TestAllFlagsSet() {}

func (s *ScaffoldCommandLayerSuite) TestOverwriteFlag() {}

/*
//1. is this a valid file?
2. path valid?
3. file already exists?
	3.1 boolean value to the business layer functions to overwrite files
4. number of method invocations (for core business logic implementations)
*/
